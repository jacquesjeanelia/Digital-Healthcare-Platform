"use strict";(()=>{var e={};e.id=887,e.ids=[887],e.modules={1185:e=>{e.exports=require("mongoose")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},55:(e,o,s)=>{s.r(o),s.d(o,{config:()=>u,default:()=>l,routeModule:()=>d});var n={};s.r(n),s.d(n,{default:()=>handler});var t=s(1802),r=s(7153),c=s(6249),i=s(1185),a=s.n(i);async function handler(e,o){if("GET"!==e.method)return o.status(405).json({message:"Method not allowed"});try{if(!process.env.MONGODB_URI)return o.status(500).json({success:!1,message:"MONGODB_URI is not defined in environment variables"});if(!process.env.JWT_SECRET)return o.status(500).json({success:!1,message:"JWT_SECRET is not defined in environment variables"});console.log("Attempting to connect to MongoDB..."),console.log("Connection string (first 20 chars):",process.env.MONGODB_URI.substring(0,20)+"..."),await a().connect(process.env.MONGODB_URI),console.log("MongoDB connected successfully");let e=Object.keys(a().connection.collections);return console.log("Collections:",e),await a().disconnect(),console.log("MongoDB disconnected"),o.status(200).json({success:!0,message:"MongoDB connection successful",collections:e,environment:{nodeEnv:"production",hasMongoUri:!!process.env.MONGODB_URI,hasJwtSecret:!!process.env.JWT_SECRET}})}catch(e){return console.error("MongoDB test error:",e),o.status(500).json({success:!1,message:"Failed to connect to MongoDB",error:e.message,stack:void 0})}}let l=(0,c.l)(n,"default"),u=(0,c.l)(n,"config"),d=new t.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/test-mongo",pathname:"/api/test-mongo",bundlePath:"",filename:""},userland:n})}};var o=require("../../webpack-api-runtime.js");o.C(e);var __webpack_exec__=e=>o(o.s=e),s=o.X(0,[222],()=>__webpack_exec__(55));module.exports=s})();