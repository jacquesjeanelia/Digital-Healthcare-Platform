"use strict";(()=>{var t={};t.id=680,t.ids=[680],t.modules={9344:t=>{t.exports=require("jsonwebtoken")},1185:t=>{t.exports=require("mongoose")},145:t=>{t.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},4969:(t,e,n)=>{n.r(e),n.d(e,{config:()=>l,default:()=>m,routeModule:()=>c});var a={};n.r(a),n.d(a,{default:()=>handler});var o=n(1802),i=n(7153),r=n(6249),s=n(4149),d=n(2793),p=n(4808),u=n(5977);async function handler(t,e){let{id:n}=t.query;if(!n||"string"!=typeof n)return e.status(400).json({message:"Invalid appointment ID"});try{await (0,s.Z)();let a=await (0,p.W)(t,e);if(!a)return;switch(t.method){case"GET":return await getAppointmentById(e,n,a);case"PUT":return await updateAppointmentById(t,e,n,a);case"DELETE":return await deleteAppointmentById(e,n,a);default:return e.status(405).json({message:"Method not allowed"})}}catch(t){return console.error("Appointment API error:",t),e.status(500).json({message:"Server error",error:t.message})}}async function getAppointmentById(t,e,n){try{let{userId:a,role:o}=n,i=await d.Z.findById(e);if(!i)return t.status(404).json({message:"Appointment not found"});if("patient"===o&&i.patientId.toString()!==a||"doctor"===o&&i.doctorId.toString()!==a)return t.status(403).json({message:"You do not have permission to view this appointment"});let r=i.toObject();if("doctor"===o||"admin"===o){let t=await u.T_.findById(i.patientId);t&&(r.patient={id:t._id,name:t.name,email:t.email,profileImage:t.profileImage})}if("patient"===o||"admin"===o){let t=await u.T_.findById(i.doctorId);if(t){let e=t.toObject();r.doctor={id:t._id,name:t.name,email:t.email,specialization:e.specialization,profileImage:t.profileImage}}}return t.status(200).json({appointment:r})}catch(e){return console.error("Error fetching appointment:",e),t.status(500).json({message:"Failed to fetch appointment",error:e.message})}}async function updateAppointmentById(t,e,n,a){try{let{userId:o,role:i}=a,r=t.body,s=await d.Z.findById(n);if(!s)return e.status(404).json({message:"Appointment not found"});if("patient"===i&&s.patientId.toString()!==o||"doctor"===i&&s.doctorId.toString()!==o)return e.status(403).json({message:"You do not have permission to update this appointment"});"patient"===i&&(delete r.doctorId,("completed"===r.status||"in-progress"===r.status)&&delete r.status),r.updatedAt=new Date;let p=await d.Z.findByIdAndUpdate(n,r,{new:!0});return e.status(200).json({message:"Appointment updated successfully",appointment:p})}catch(t){return console.error("Error updating appointment:",t),e.status(500).json({message:"Failed to update appointment",error:t.message})}}async function deleteAppointmentById(t,e,n){try{let{userId:a,role:o}=n,i=await d.Z.findById(e);if(!i)return t.status(404).json({message:"Appointment not found"});if("patient"===o&&i.patientId.toString()!==a||"doctor"===o&&i.doctorId.toString()!==a)return t.status(403).json({message:"You do not have permission to delete this appointment"});return await d.Z.findByIdAndDelete(e),t.status(200).json({message:"Appointment deleted successfully"})}catch(e){return console.error("Error deleting appointment:",e),t.status(500).json({message:"Failed to delete appointment",error:e.message})}}let m=(0,r.l)(a,"default"),l=(0,r.l)(a,"config"),c=new o.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/appointments/[id]",pathname:"/api/appointments/[id]",bundlePath:"",filename:""},userland:a})}};var e=require("../../../webpack-api-runtime.js");e.C(t);var __webpack_exec__=t=>e(e.s=t),n=e.X(0,[222,149,977,793,808],()=>__webpack_exec__(4969));module.exports=n})();