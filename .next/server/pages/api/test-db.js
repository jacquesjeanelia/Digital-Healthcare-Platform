"use strict";(()=>{var e={};e.id=414,e.ids=[414],e.modules={1185:e=>{e.exports=require("mongoose")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},1957:(e,o,n)=>{n.r(o),n.d(o,{config:()=>u,default:()=>g,routeModule:()=>m});var t={};n.r(t),n.d(t,{default:()=>handler});var s=n(1802),c=n(7153),a=n(6249),r=n(4149),i=n(5977),l=n(1185),d=n.n(l);async function handler(e,o){if("GET"!==e.method)return o.status(405).json({message:"Method not allowed"});try{console.log("Test-DB API: Starting database connection test");let e=process.env.MONGODB_URI||"",n=e?e.replace(/(mongodb\+srv:\/\/)([^:]+):([^@]+)@(.+)/,"$1$2:****@$4"):"Not defined";console.log("Test-DB API: Using MongoDB connection",n);let t=1===d().connection.readyState;console.log("Test-DB API: Current mongoose connection state:",t?"Connected":"Not connected"),console.log("Test-DB API: Attempting to connect to MongoDB..."),await (0,r.Z)(),console.log("Test-DB API: MongoDB connection successful");let s={readyState:d().connection.readyState,host:d().connection.host,name:d().connection.name,clientConnected:1===d().connection.readyState};console.log("Test-DB API: Getting collections and models");let c=Object.keys(d().connection.collections),a=d().modelNames();console.log("Test-DB API: Counting users");let l=0,g=null;try{l=await i.T_.countDocuments(),console.log("Test-DB API: Found",l,"users in database")}catch(e){console.error("Test-DB API: Error counting users:",e),g={message:e.message,name:e.name}}return o.status(200).json({success:!0,message:"MongoDB connection test completed",connectionState:s,collections:c,models:a,userCount:l,countError:g,environment:{nodeEnv:"production",hasMongoUri:!!process.env.MONGODB_URI,mongoUriMasked:n,hasJwtSecret:!!process.env.JWT_SECRET}})}catch(c){console.error("Test-DB API: Connection error:",c);let e={name:c.name,message:c.message,code:c.code},n="unknown";"MongooseError"===c.name?n="mongoose":"MongoError"===c.name||"MongoServerError"===c.name?n="mongodb":c.message&&c.message.includes("ENOTFOUND")?n="dns":c.message&&c.message.includes("ECONNREFUSED")?n="connection":c.message&&c.message.includes("authentication")&&(n="auth");let t=process.env.MONGODB_URI||"",s=t?{hasProtocol:t.startsWith("mongodb://")||t.startsWith("mongodb+srv://"),includesCredentials:t.includes("@"),includesHost:t.includes(".mongodb.net")||t.includes("localhost")}:{missing:!0};return o.status(500).json({success:!1,message:"MongoDB connection test failed",error:e,errorType:n,mongoUriStructure:s,stack:void 0})}}let g=(0,a.l)(t,"default"),u=(0,a.l)(t,"config"),m=new s.PagesAPIRouteModule({definition:{kind:c.x.PAGES_API,page:"/api/test-db",pathname:"/api/test-db",bundlePath:"",filename:""},userland:t})}};var o=require("../../webpack-api-runtime.js");o.C(e);var __webpack_exec__=e=>o(o.s=e),n=o.X(0,[222,149,977],()=>__webpack_exec__(1957));module.exports=n})();