"use strict";(()=>{var e={};e.id=504,e.ids=[504],e.modules={9344:e=>{e.exports=require("jsonwebtoken")},1185:e=>{e.exports=require("mongoose")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},1066:(e,t,n)=>{n.r(t),n.d(t,{config:()=>l,default:()=>p,routeModule:()=>m});var a={};n.r(a),n.d(a,{default:()=>handler});var s=n(1802),r=n(7153),o=n(6249),i=n(4149),u=n(2793),d=n(4808);async function handler(e,t){try{await (0,i.Z)();let n=await (0,d.W)(e,t);if(!n)return;switch(e.method){case"GET":return await getAppointments(e,t,n);case"POST":return await createAppointment(e,t,n);case"PUT":return await updateAppointment(e,t,n);case"DELETE":return await deleteAppointment(e,t,n);default:return t.status(405).json({message:"Method not allowed"})}}catch(e){return console.error("Appointment API error:",e),t.status(500).json({message:"Server error",error:e.message})}}async function getAppointments(e,t,n){let{userId:a,role:s}=n,{startDate:r,endDate:o,status:i}=e.query,d={};"patient"===s?d.patientId=a:"doctor"===s&&(d.doctorId=a),r&&o&&(d.dateTime={$gte:new Date(r),$lte:new Date(o)}),i&&(d.status=i);let p=await u.Z.find(d).sort({dateTime:1}).lean();return t.status(200).json({appointments:p})}async function createAppointment(e,t,n){let{role:a}=n,{patientId:s,doctorId:r,dateTime:o,duration:i,type:d,reasonForVisit:p,symptoms:l,virtualMeetingLink:m,location:c}=e.body;if(!s||!r||!o||!i||!d)return t.status(400).json({message:"Missing required fields"});if("patient"===a&&s!==n.userId)return t.status(403).json({message:"Patients can only create appointments for themselves"});let f=await u.Z.create({patientId:s,doctorId:r,dateTime:new Date(o),duration:i,status:"scheduled",type:d,reasonForVisit:p,symptoms:l,virtualMeetingLink:m,location:c,createdAt:new Date,updatedAt:new Date});return t.status(201).json({appointment:f})}async function updateAppointment(e,t,n){let{role:a}=n,{id:s}=e.query,r=e.body;if(!s)return t.status(400).json({message:"Appointment ID is required"});let o=await u.Z.findById(s);if(!o)return t.status(404).json({message:"Appointment not found"});if("patient"===a&&o.patientId.toString()!==n.userId||"doctor"===a&&o.doctorId.toString()!==n.userId)return t.status(403).json({message:"You can only update your own appointments"});r.updatedAt=new Date;let i=await u.Z.findByIdAndUpdate(s,r,{new:!0});return t.status(200).json({appointment:i})}async function deleteAppointment(e,t,n){let{role:a}=n,{id:s}=e.query;if(!s)return t.status(400).json({message:"Appointment ID is required"});let r=await u.Z.findById(s);return r?"patient"===a&&r.patientId.toString()!==n.userId||"doctor"===a&&r.doctorId.toString()!==n.userId?t.status(403).json({message:"You can only delete your own appointments"}):(await u.Z.findByIdAndDelete(s),t.status(200).json({message:"Appointment deleted successfully"})):t.status(404).json({message:"Appointment not found"})}let p=(0,o.l)(a,"default"),l=(0,o.l)(a,"config"),m=new s.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/appointments",pathname:"/api/appointments",bundlePath:"",filename:""},userland:a})}};var t=require("../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),n=t.X(0,[222,149,793,808],()=>__webpack_exec__(1066));module.exports=n})();